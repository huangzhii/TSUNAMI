### code chunk number 1: CRImage.Rnw:31-32
###################################################
library(CRImage)
###################################################
### code chunk number 2: CRImage.Rnw:38-55
###################################################
f = system.file("extdata", "exImg2.jpg", package="CRImage")
img=readImage(f)
#convert image to the HSV color space
imgHSV=convertRGBToHSV(img)
#convert image to the LAB color space
imgLAB=convertRGBToLAB(img)
#convert back to the RGB color space
imgRGB=convertHSVToRGB(imgHSV)
imgRGB=Image(imgRGB)
colorMode(imgRGB)='color'
#convert back to the RGB color space
imgRGB=convertLABToRGB(imgLAB)
imgRGB
imshow(imgRGB)
plot(imgRGB)
imgRGB=Image(imgRGB)
colorMode(imgRGB)='color'
display(imgRGB)
###################################################
### code chunk number 3: CRImage.Rnw:73-81
###################################################
f = system.file("extdata", "exImg2.jpg", package="CRImage")
img=readImage(f)
#convert to grayscale
imgG=EBImage::channel(img,"gray")
#create a mask for white pixel
whitePixelMask=img[,,1]>0.85 & img[,,2]>0.85 & img[,,3]>0.85
#create binary image
imgB=createBinaryImage(imgG,img,method="otsu",numWindows=4,whitePixelMask=whitePixelMask)
display(imgB)
display(imgRGB)
display(imgB)
###################################################
### code chunk number 4: CRImage.Rnw:92-94
###################################################
f = system.file("extdata", "exImg2.jpg", package="CRImage")
segmentationValues=segmentImage(filename=f,maxShape=800,minShape=40,failureRegion=2000,threshold="otsu",numWindows=4)
display(segmentationValues)
read.table("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/BRCA_driver_gene.csv")
read.table("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/BRCA_driver_gene.csv")
read.table("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/BRCA_driver_gene.csv")
read.table("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/BRCA_driver_gene.csv")
read.table("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/BRCA_driver_gene.csv", sep = ",")
driver.gene = read.table("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/BRCA_driver_gene.csv", sep = ",",header = T)
driver.gene[,2] == "BRCA"
driver.gene[driver.gene[,2] == "BRCA",]
driver.gene = driver.gene[driver.gene[,2] == "BRCA",]
driver.gene
driver.gene[,1]
# 11/28/2018 Zhi Huang
options(stringsAsFactors = F)
driver.gene = read.table("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/BRCA_driver_gene.csv", sep = ",",header = T)
driver.gene = driver.gene[driver.gene[,2] == "BRCA",]
driver.gene = driver.gene[,1]
driver.gene
read.csv("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/RNAseq_mergedCluster.csv", row.names = 1, header = F)
modules = read.csv("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/RNAseq_mergedCluster.csv", row.names = 1, header = F)
modules
View(modules)
intersect(modules[i,], driver.gene)
for (i in 1:dim(modules)[1]){
intersect(modules[i,], driver.gene)
}
message(intersection)
for (i in 1:dim(modules)[1]){
intersection = intersect(modules[i,], driver.gene)
message(intersection)
}
for (i in 1:dim(modules)[1]){
intersection = intersect(modules[i,], driver.gene)
message(i)
message(intersection)
}
modules[i,]
modules[1,]
modules[19,]
modules[12,]
modules[13,]
paste(modules[i,], collapse = "\n")
sapply(module[i,], message)
sapply(modules[i,], message)
for (i in 1:dim(modules)[1]){
intersection = intersect(modules[i,], driver.gene)
message(i)
message(intersection)
# sapply(modules[i,], message)
}
for (i in 1:dim(modules)[1]){
intersection = intersect(modules[i,], driver.gene)
if (!is.null(intersection)){
message(i)
message(intersection)
}
# sapply(modules[i,], message)
}
intersection
intersect(modules[8,], driver.gene)
for (i in 1:dim(modules)[1]){
intersection = intersect(modules[i,], driver.gene)
if (length(intersection) > 0){
message(i)
message(intersection)
}
# sapply(modules[i,], message)
}
# 11/28/2018 Zhi Huang
options(stringsAsFactors = F)
driver.gene = read.table("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/BRCA_driver_gene.csv", sep = ",",header = T)
# driver.gene = driver.gene[driver.gene[,2] == "BRCA",]
driver.gene = driver.gene[,1]
modules = read.csv("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/RNAseq_mergedCluster.csv", row.names = 1, header = F)
for (i in 1:dim(modules)[1]){
intersection = intersect(modules[i,], driver.gene)
if (length(intersection) > 0){
message(i)
message(intersection)
}
# sapply(modules[i,], message)
}
for (i in 1:dim(modules)[1]){
intersection = intersect(modules[i,], driver.gene)
if (length(intersection) > 0){
message(i)
message(paste(intersection, collapse = " "))
}
# sapply(modules[i,], message)
}
# 11/28/2018 Zhi Huang
options(stringsAsFactors = F)
driver.gene = read.table("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/BRCA_driver_gene.csv", sep = ",",header = T)
driver.gene = driver.gene[driver.gene[,2] == "BRCA",]
driver.gene = driver.gene[,1]
modules = read.csv("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/RNAseq_mergedCluster.csv", row.names = 1, header = F)
for (i in 1:dim(modules)[1]){
intersection = intersect(modules[i,], driver.gene)
if (length(intersection) > 0){
message(i)
message(paste(intersection, collapse = " "))
}
# sapply(modules[i,], message)
}
# 11/28/2018 Zhi Huang
options(stringsAsFactors = F)
driver.gene = read.table("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/BRCA_driver_gene.csv", sep = ",",header = T)
# driver.gene = driver.gene[driver.gene[,2] == "BRCA",]
driver.gene = driver.gene[,1]
modules = read.csv("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/RNAseq_mergedCluster.csv", row.names = 1, header = F)
for (i in 1:dim(modules)[1]){
intersection = intersect(modules[i,], driver.gene)
if (length(intersection) > 0){
message(i)
message(paste(intersection, collapse = " "))
}
# sapply(modules[i,], message)
}
module[5,]
modules[5,]
modules = read.csv("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/RNAseq_mergedCluster.csv", row.names = 1, header = F)
for (i in 1:dim(modules)[1]){
intersection = intersect(modules[i,], driver.gene)
if (length(intersection) > 0){
message(i)
message(paste(intersection, collapse = " "))
}
# sapply(modules[i,], message)
}
# 11/28/2018 Zhi Huang
options(stringsAsFactors = F)
driver.gene = read.table("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/BRCA_driver_gene.csv", sep = ",",header = T)
# driver.gene = driver.gene[driver.gene[,2] == "BRCA",]
driver.gene = driver.gene[,1]
modules = read.csv("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/RNAseq_mergedCluster.csv", row.names = 1, header = F)
for (i in 1:dim(modules)[1]){
intersection = intersect(modules[i,], driver.gene)
if (length(intersection) > 0){
message(i)
message(paste(intersection, collapse = " "))
}
# sapply(modules[i,], message)
}
source('~/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/findDrivergene.R', echo=TRUE)
# 11/28/2018 Zhi Huang
options(stringsAsFactors = F)
driver.gene = read.table("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/BRCA_driver_gene.csv", sep = ",",header = T)
driver.gene = driver.gene[driver.gene[,2] == "BRCA",]
driver.gene = driver.gene[,1]
modules = read.csv("/home/zhihuan/Documents/20181115_Multiomic_AutoEncoder/Biological Analysis/RNAseq_mergedCluster.csv", row.names = 1, header = F)
for (i in 1:dim(modules)[1]){
intersection = intersect(modules[i,], driver.gene)
if (length(intersection) > 0){
message(i)
message(paste(intersection, collapse = " "))
}
# sapply(modules[i,], message)
}
sapply(modules[13,], print)
modules[13,]
str = modules[13,]
str
list(str)
as.character(str)
str = as.character(modules[13,])
str
str = str[sapply(str, length) >0]
str
length(str[1])
str = str[sapply(str, nchar) > 0]
str
sapply(str, message)
X = cbind(x1,x2,lbl)
x1 = c(1,4,8,5,3,7,10,4,4,8)
x2 = c(10,4,7,6,16,7,14,2,10,8)
lbl = c(0,0,1,0,0,1,1,0,1,0)
X = cbind(x1,x2,lbl)
X
X = data.frame(cbind(x1,x2,lbl))
X
library(ggplot2)
X.m = melt(X)
library(reshape2)
X.m = melt(X)
X.m
X.m = melt(X, value = "lbl")
X.m
X.m = melt(X, id = "x1")
X.m
library(ggplot2)
library(reshape2)
x1 = c(1,4,8,5,3,7,10,4,4,8)
x2 = c(10,4,7,6,16,7,14,2,10,8)
value = c(0,0,1,0,0,1,1,0,1,0)
X = data.frame(cbind(x1,x2,value))
X.m = melt(X)
X.m
X = (cbind(x1,x2,lbl))
X.m = melt(X, id = "x1")
X.m = melt(X)
X.m
X.m = melt(X, value.name = "lbl")
X.m
X.m = melt(X, variable.name = c("x1","x2"))
X.m
X.m = melt(X, varnames = c("x1","x2"))
X.m
X.m = melt(X, varnames = c("x1","x2"), value.name = "lbl")
X.m
MyData <- matrix(rnorm(15,500), nrow = 5, ncol = 3, dimnames = list(
c("Unknown","0-4","4-9","10-14","15-19"),c("Area1","Area2","Area3")))
MyData
a = read.csv("~/Desktop/a.csv")
a
a = read.csv("~/Desktop/a.csv", header = F)
a
cor(a)
cor(a, method = "spearman")
# 01/24/2018 Zhi Huang
library(openxlsx)
library(Rtsne)
library(ggplot2)
library(reshape2)
library(ggpubr)
options(stringsAsFactors = F)
# features generated based on affine transformation
feature = read.csv("/media/zhihuan/06D2772E622655A2/20181122_TNBC_NAC/4_IHC_features/IHC_features_from_affine/IHC_features_affine_results.csv", row.names = 1)
colnames(feature) = c("tumor_pixel", "stroma_pixel", "bg_pixel",
"pixel_ratio_tumor_to_tissue", "pixel_ratio_stroma_to_tissue", "pixel_ratio_bg_to_tissue",
"CD163_tumor_ratio","CD163_stroma_ratio","CD163_tissue_ratio","CD163_bg_ratio",
"CD8_tumor_ratio","CD8_stroma_ratio","CD8_tissue_ratio","CD8_bg_ratio",
"PDL1_tumor_ratio","PDL1_stroma_ratio","PDL1_tissue_ratio","PDL1_bg_ratio",
"CD163_count_tumor_ratio","CD163_count_stroma_ratio","CD163_count_tissue_ratio","CD163_count_bg_ratio",
"CD8_count_tumor_ratio","CD8_count_stroma_ratio","CD8_count_tissue_ratio","CD8_count_bg_ratio",
"PDL1_count_tumor_ratio","PDL1_count_stroma_ratio","PDL1_count_tissue_ratio","PDL1_count_bg_ratio")
# Get Clinical Data
uniqueID_case_match = read.csv('/media/zhihuan/06D2772E622655A2/Zaibo_Li/TNBC-NAC/UniqID-Case_match.csv')
uniqueID_case_match$ID = as.numeric(sprintf("%d%02d", uniqueID_case_match$X, uniqueID_case_match$X.1))
clinical = read.csv('/media/zhihuan/06D2772E622655A2/Zaibo_Li/TNBC-NAC/TNBC with NAC 2011-2016 For Kun new_merged.csv')
rownames(clinical) = uniqueID_case_match$ID[match(clinical$bx.., uniqueID_case_match$Case)]
bad.patient = setdiff(as.numeric(rownames(clinical)), as.numeric(rownames(feature)))
for (p in bad.patient){
position = which(as.numeric(rownames(clinical)) == p)
clinical = clinical[-position,]
}
X = feature
X$Age = clinical$Age
# reorder clinical data
order = sort.int(as.numeric(rownames(clinical)), index.return = T)$ix
clinical = clinical[order,]
sum(rownames(clinical) != rownames(feature)) == 0 # make sure rownames are identical
# data normalization to [0, 1]
colmin = apply(X,2,min)
colmax = apply(X,2,max)
X.norm = data.frame(t(apply(sweep(X,2,colmin), 1, function(x) x/(colmax - colmin))))
hist(as.matrix(X.norm))
X$PCR = clinical$PCR
X.norm$PCR = clinical$PCR
X.y = X
X.norm.y = X.norm
write.csv(X.y, file = "/media/zhihuan/06D2772E622655A2/20181122_TNBC_NAC/5_Data_Preprocessing/data_from_affine/X_y.csv", row.names = T)
write.csv(X.norm.y, file = "/media/zhihuan/06D2772E622655A2/20181122_TNBC_NAC/5_Data_Preprocessing/data_from_affine/X_norm_y.csv", row.names = T)
#############################
#############################
# Correlation analysis
#############################
cor(X.y$pixel_ratio_stroma_to_tissue, X.y$pixel_ratio_tumor_to_tissue)
plot(X.y$pixel_ratio_stroma_to_tissue, X.y$pixel_ratio_tumor_to_tissue)
#############################
# Image Registration Quality
#############################
theme_set(theme_pubr())
theme_set(theme_bw())
# X.y = read.csv("/home/zhihuan/Documents/20180531_Histopathology_Images/Scripts_new/3_Data_Preprocessing/X_y.csv", row.names = 1, header = T)
####
bg_rate = mean(X.y$CD163_bg_ratio * X.y$pixel_ratio_bg_to_tissue / (X.y$CD163_tumor_ratio * X.y$pixel_ratio_tumor_to_tissue +
X.y$CD163_stroma_ratio * X.y$pixel_ratio_stroma_to_tissue + X.y$CD163_bg_ratio * X.y$pixel_ratio_bg_to_tissue ), na.rm = T)
tumor_rate = mean(X.y$CD163_tumor_ratio * X.y$pixel_ratio_tumor_to_tissue / (X.y$CD163_tumor_ratio * X.y$pixel_ratio_tumor_to_tissue +
X.y$CD163_stroma_ratio * X.y$pixel_ratio_stroma_to_tissue + X.y$CD163_bg_ratio * X.y$pixel_ratio_bg_to_tissue ), na.rm = T)
stroma_rate = mean(X.y$CD163_stroma_ratio * X.y$pixel_ratio_stroma_to_tissue / (X.y$CD163_tumor_ratio * X.y$pixel_ratio_tumor_to_tissue +
X.y$CD163_stroma_ratio * X.y$pixel_ratio_stroma_to_tissue + X.y$CD163_bg_ratio * X.y$pixel_ratio_bg_to_tissue ), na.rm = T)
all_rate1 = t(data.frame(c(tumor_rate, stroma_rate, bg_rate)))
#####
bg_rate = mean(X.y$CD8_bg_ratio * X.y$pixel_ratio_bg_to_tissue / (X.y$CD8_tumor_ratio * X.y$pixel_ratio_tumor_to_tissue +
X.y$CD8_stroma_ratio * X.y$pixel_ratio_stroma_to_tissue + X.y$CD8_bg_ratio * X.y$pixel_ratio_bg_to_tissue ), na.rm = T)
tumor_rate = mean(X.y$CD8_tumor_ratio * X.y$pixel_ratio_tumor_to_tissue / (X.y$CD8_tumor_ratio * X.y$pixel_ratio_tumor_to_tissue +
X.y$CD8_stroma_ratio * X.y$pixel_ratio_stroma_to_tissue + X.y$CD8_bg_ratio * X.y$pixel_ratio_bg_to_tissue ), na.rm = T)
stroma_rate = mean(X.y$CD8_stroma_ratio * X.y$pixel_ratio_stroma_to_tissue / (X.y$CD8_tumor_ratio * X.y$pixel_ratio_tumor_to_tissue +
X.y$CD8_stroma_ratio * X.y$pixel_ratio_stroma_to_tissue + X.y$CD8_bg_ratio * X.y$pixel_ratio_bg_to_tissue ), na.rm = T)
all_rate2 = t(data.frame(c(tumor_rate, stroma_rate, bg_rate)))
####
bg_rate = mean(X.y$PDL1_bg_ratio * X.y$pixel_ratio_bg_to_tissue / (X.y$PDL1_tumor_ratio * X.y$pixel_ratio_tumor_to_tissue +
X.y$PDL1_stroma_ratio * X.y$pixel_ratio_stroma_to_tissue + X.y$PDL1_bg_ratio * X.y$pixel_ratio_bg_to_tissue ), na.rm = T)
tumor_rate = mean(X.y$PDL1_tumor_ratio * X.y$pixel_ratio_tumor_to_tissue / (X.y$PDL1_tumor_ratio * X.y$pixel_ratio_tumor_to_tissue +
X.y$PDL1_stroma_ratio * X.y$pixel_ratio_stroma_to_tissue + X.y$PDL1_bg_ratio * X.y$pixel_ratio_bg_to_tissue ), na.rm = T)
stroma_rate = mean(X.y$PDL1_stroma_ratio * X.y$pixel_ratio_stroma_to_tissue / (X.y$PDL1_tumor_ratio * X.y$pixel_ratio_tumor_to_tissue +
X.y$PDL1_stroma_ratio * X.y$pixel_ratio_stroma_to_tissue + X.y$PDL1_bg_ratio * X.y$pixel_ratio_bg_to_tissue ), na.rm = T)
all_rate3 = t(data.frame(c(tumor_rate, stroma_rate, bg_rate)))
all_rate = rbind(all_rate1, all_rate2, all_rate3)
colnames(all_rate) = c("Tumor", "Stroma", "Background")
rownames(all_rate) = c("CD163+", "CD8+", "PD-L1")
all_rate = as.data.frame(round(all_rate, 4)*100)
all_rate = cbind(rownames(all_rate), all_rate)
colnames(all_rate) = c("Cells", "Tumor", "Stroma", "Background")
all_rate.melt = melt(all_rate, id.vars='Cells')
# plot everything
fig <- ggplot(all_rate.melt, aes(Cells, value)) +
geom_bar(aes(fill = variable), position = "dodge", stat="identity") +
geom_text(aes(Cells, value, label=paste0(as.character(value),"%"), group = variable,
vjust = -0.2), position = position_dodge(width = 0.9)) +
labs(title="Averaged proportion of CD163/CD8/PD-L1 pixels on \n tumor/stroma/background areas",
x ="Cells or Proteins", y = "Proportion (%)") +
theme(text = element_text(size=12),
axis.text.x = element_text(angle=0, size = 12),
plot.title = element_text(hjust = 0.5)) +
scale_fill_discrete(name = "Legend")
fig
ggsave("/media/zhihuan/06D2772E622655A2/20181122_TNBC_NAC/5_Data_Preprocessing/data_from_affine/image_registration_quality.png",
plot = fig, width = 8, height = 5, dpi = 300)
load("/media/zhihuan/06D2772E622655A2/MMRF/CD138/Data/0661-2_CD138Plus_TPM.RData")
head(dat)
dim(dat)
colnames(dat)
rownames(dat)
colnames(dat)
colnames(dat)
dim(dat)
colnames(dat)
rownames(dat)
colnames(dat)
dat[1:100,1:100]
colSums(dat)
(colSums(dat)>0)
sum (colSums(dat)>0)
sum(colSums(dat)>500)
sum(colSums(dat)>5000)
sum(rowSums(dat)>0)
library(shiny); source('Desktop/testshiny/app.R')
source('Desktop/testshiny/app.R')
source('Desktop/testshiny/app.R')
install.packages("sendmailR ")
install.packages("sendmailR")
library(sendmailR)
source('Desktop/testshiny/app.R')
list(smtpServer="serverinfo")
install.packages("mailR")
ui <- pageWithSidebar(
headerPanel("fill this and send"),
sidebarPanel(
),
mainPanel(
textInput("name", "Name:", ""),
textInput("body", "Body:", ""),
actionButton("goButton",label = "Send this")
)
)
install.packages("rJava")
install.packages("mailR")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
send.mail(from = "sender@gmail.com",
to = c("Recipient 1 <recipient1@gmail.com>", "recipient2@gmail.com"),
cc = c("CC Recipient <cc.recipient@gmail.com>"),
bcc = c("BCC Recipient <bcc.recipient@gmail.com>"),
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = FALSE,
send = TRUE)
send.mail(from = "sender@gmail.com",
to = c("Recipient 1 <recipient1@gmail.com>", "recipient2@gmail.com"),
cc = c("CC Recipient <cc.recipient@gmail.com>"),
bcc = c("BCC Recipient <bcc.recipient@gmail.com>"),
subject = "Subject of the email",
body = "Body of the email",
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = FALSE,
send = TRUE)
install.packages("gmailr")
library(gmailr)
gmail_auth()
mail <- mime(
To = "hz9423@gmail.com",
From = "tsunamibioinfo@gmail.com",
Subject = "My bot sent this",
body = "Test successful")
send_message(mail)
gmail_auth()
?gmail_auth
NA
NA*0
NA^0
True
TRUE | NA
x = 1
y =2
++x == 2
++x
x = x+1
x = 1
(x=x+1)
(x=x+1)
(x=x+1) == 2
x = 1
(x=x+1) == 2
x = 1
y = 1
(x=x+1) == 2 | (y=y+1)==2
y
x
x=1
y=1
((x=x+1) == 2) | ((y=y+1)==2)
x
y
library(GEOquery)
setwd("~/Desktop/TSUNAMI/shiny/")
load("./data/GEO_20190303.Rdata")
annotation = NULL
bad.gse = NULL
i = 0
for (gse in GEO$Accession){
i = i+1
if (i > 10000){
return()
}
print(gse)
t <- try(gset <- getGEO(gse, GSEMatrix=TRUE, AnnotGPL=FALSE))
if("try-error" %in% class(t)) {
print("error occured")
bad.gse = c(bad.gse, gse)
} else {
if (length(gset) == 0){
print("This GSE accession doesn't contain any series matrix.")
bad.gse = c(bad.gse, gse)
}
gset = gset[[1]] # only pick the first gset for testing
annotation = c(annotation, gset@annotation)
}
rm(gset)
}
table(annotation)
bad.gse
shiny::runApp()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
install.packages("BiocManager")
shiny::runApp()
data.temp
runApp()
data()
runApp()
runApp()
data_temp
View(data_temp)
data_tempdata_temp
data_temp
colnames(data_temp) = data_temp[1,]
data_temp = data_temp[2:dim(data_temp)[1],]
View(data_temp)
runApp()
data.temp
View(data.temp)
data()
shiny::runApp()
runApp()
runApp()
runApp()

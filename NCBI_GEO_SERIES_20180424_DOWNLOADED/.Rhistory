m <- m[,-(1:2)]/1e04
m <- as.matrix(m[,c(1:6)])
dimnames(m) <- list(orig = df1$country, dest = df1$country)
#Sort order of data.frame and matrix for plotting in circos
df1 <- arrange(df1, order)
df1$country <- factor(df1$country, levels = df1$country)
m <- m[levels(df1$country),levels(df1$country)]
### Define ranges of circos sectors and their colors (both of the sectors and the links)
df1$xmin <- 0
df1$xmax <- rowSums(m) + colSums(m)
n <- nrow(df1)
df1$rcol<-rgb(df1$r, df1$g, df1$b, max = 255)
df1$lcol<-rgb(df1$r, df1$g, df1$b, alpha=200, max = 255)
### Plot sectors (outer part)
par(mar=rep(0,4))
circos.clear()
df1
df2
for (j in BED.data$chrom){
if(j<i){
circos.link(i, 1, j, 1, h=0.3, col = "black", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
library(dplyr)
### Make data
m <- data.frame(order = 1:6,
            country = c("Ausralia", "India", "China", "Japan", "Thailand", "Malaysia"),
            V3 = c(1, 150000, 90000, 180000, 15000, 10000),
            V4 = c(35000, 1, 10000, 12000, 25000, 8000),
            V5 = c(10000, 7000, 1, 40000, 5000, 4000),
            V6 = c(7000, 8000, 175000, 1, 11000, 18000),
            V7 = c(70000, 30000, 22000, 120000, 1, 40000),
            V8 = c(60000, 90000, 110000, 14000, 30000, 1),
            r = c(255,255,255,153,51,51),
            g = c(51, 153, 255, 255, 255, 255),
            b = c(51, 51, 51, 51, 51, 153),
            stringsAsFactors = FALSE)
df1 <- m[, c(1,2, 9:11)]
m <- m[,-(1:2)]/1e04
m <- as.matrix(m[,c(1:6)])
dimnames(m) <- list(orig = df1$country, dest = df1$country)
#Sort order of data.frame and matrix for plotting in circos
df1 <- arrange(df1, order)
df1$country <- factor(df1$country, levels = df1$country)
m <- m[levels(df1$country),levels(df1$country)]
### Define ranges of circos sectors and their colors (both of the sectors and the links)
df1$xmin <- 0
df1$xmax <- rowSums(m) + colSums(m)
n <- nrow(df1)
df1$rcol<-rgb(df1$r, df1$g, df1$b, max = 255)
df1$lcol<-rgb(df1$r, df1$g, df1$b, alpha=200, max = 255)
### Plot sectors (outer part)
par(mar=rep(0,4))
circos.clear()
### Basic circos graphic parameters
circos.par(cell.padding=c(0,0,0,0), track.margin=c(0,0.15), start.degree = 90, gap.degree =4)
circos.initialize(factors = df1$country, xlim = cbind(df1$xmin, df1$xmax))
### Plot sectors
circos.trackPlotRegion(ylim = c(0, 1), factors = df1$country, track.height=0.1,
                      #panel.fun for each sector
                      panel.fun = function(x, y) {
                      #select details of current sector
                      name = get.cell.meta.data("sector.index")
                      i = get.cell.meta.data("sector.numeric.index")
                      xlim = get.cell.meta.data("xlim")
                      ylim = get.cell.meta.data("ylim")
                      #text direction (dd) and adjusmtents (aa)
                      theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
                      dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
                      aa = c(1, 0.5)
                      if(theta < 90 || theta > 270)  aa = c(0, 0.5)
                      #plot country labels
                      circos.text(x=mean(xlim), y=1.7, labels=name, facing = dd, cex=0.6,  adj = aa)
                      #plot main sector
                      circos.rect(xleft=xlim[1], ybottom=ylim[1], xright=xlim[2], ytop=ylim[2],
                                  col = df1$rcol[i], border=df1$rcol[i])
                      #blank in part of main sector
                      circos.rect(xleft=xlim[1], ybottom=ylim[1], xright=xlim[2]-rowSums(m)[i], ytop=ylim[1]+0.3,
                                  col = "white", border = "white")
                      #white line all the way around
                      circos.rect(xleft=xlim[1], ybottom=0.3, xright=xlim[2], ytop=0.32, col = "white", border = "white")
                      #plot axis
                      circos.axis(labels.cex=0.6, direction = "outside", major.at=seq(from=0,to=floor(df1$xmax)[i],by=5),
                                  minor.ticks=1, labels.away.percentage = 0.15)
                    })
### Plot links (inner part)
### Add sum values to df1, marking the x-position of the first links
### out (sum1) and in (sum2). Updated for further links in loop below.
df1$sum1 <- colSums(m)
df1$sum2 <- numeric(n)
### Create a data.frame of the flow matrix sorted by flow size, to allow largest flow plotted first
df2 <- cbind(as.data.frame(m),orig=rownames(m),  stringsAsFactors=FALSE)
df2 <- reshape(df2, idvar="orig", varying=list(1:n), direction="long",
           timevar="dest", time=rownames(m),  v.names = "m")
df2 <- arrange(df2,desc(m))
### Keep only the largest flows to avoid clutter
df2 <- subset(df2, m > quantile(m,0.6))
for(k in 1:nrow(df2)){
    #i,j reference of flow matrix
    i<-match(df2$orig[k],df1$country)
    j<-match(df2$dest[k],df1$country)
#plot link
circos.link(sector.index1=df1$country[i], point1=c(df1$sum1[i], df1$sum1[i] + abs(m[i, j])),
            sector.index2=df1$country[j], point2=c(df1$sum2[j], df1$sum2[j] + abs(m[i, j])),
            col = df1$lcol[i])
#update sum1 and sum2 for use when plotting the next link
df1$sum1[i] = df1$sum1[i] + abs(m[i, j])
df1$sum2[j] = df1$sum2[j] + abs(m[i, j])
}
df1$sum1[1]
df1$sum1[i] + abs(m[i, j]
)
df1$lcol[i]
BED.data
BED.data
length(BED.data$chrom)
BED.data$chrom
circos.initializeWithIdeogram(plotType = NULL)
for (i in length(BED.data$chrom)){
for (j in length(BED.data$chrom)){
if(j<i){
circos.link(BED.data$chrom[i], c(BED.data$txStart[i],BED.data$txEnd[i]),
BED.data$chrom[j], c(BED.data$txStart[i],BED.data$txEnd[i]),
1, h=0.3, col = "black", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
circos.initializeWithIdeogram(plotType = NULL)
for (i in length(BED.data$chrom)){
for (j in length(BED.data$chrom)){
if(j<i){
circos.link(BED.data$chrom[i], c(BED.data$txStart[i],BED.data$txEnd[i]),
BED.data$chrom[j], c(BED.data$txStart[i],BED.data$txEnd[i]),
1, h=0.3, col = "black", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
# save(BED.data, file ="~/Desktop/BEDdata.Rdata")
par(mar = c(1, 1, 1, 1))
# reference: http://zuguang.de/circlize_book/book/initialize-genomic-plot.html#initialize-cytoband
circos.clear()
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initializeWithIdeogram(species = mySpecies, chromosome.index = paste0("chr", c(1:22, "X", "Y")))
for (i in length(BED.data$chrom)){
for (j in length(BED.data$chrom)){
if(j<i){
circos.link(BED.data$chrom[i], c(BED.data$txStart[i],BED.data$txEnd[i]),
BED.data$chrom[j], c(BED.data$txStart[i],BED.data$txEnd[i]),
1, h=0.3, col = "black", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
BED.data
circos.genomicLabels(BED.data, labels.column = 5, side = "inside",
col = as.numeric(factor(BED.data[[1]])), line_col = as.numeric(factor(BED.data[[1]])))
circos.clear()
### You need several libraries
library(circlize)
library(migest)
library(dplyr)
### Make data
m <- data.frame(order = 1:6,
country = c("Ausralia", "India", "China", "Japan", "Thailand", "Malaysia"),
V3 = c(1, 150000, 90000, 180000, 15000, 10000),
V4 = c(35000, 1, 10000, 12000, 25000, 8000),
V5 = c(10000, 7000, 1, 40000, 5000, 4000),
V6 = c(7000, 8000, 175000, 1, 11000, 18000),
V7 = c(70000, 30000, 22000, 120000, 1, 40000),
V8 = c(60000, 90000, 110000, 14000, 30000, 1),
r = c(255,255,255,153,51,51),
g = c(51, 153, 255, 255, 255, 255),
b = c(51, 51, 51, 51, 51, 153),
stringsAsFactors = FALSE)
df1 <- m[, c(1,2, 9:11)]
m <- m[,-(1:2)]/1e04
m <- as.matrix(m[,c(1:6)])
dimnames(m) <- list(orig = df1$country, dest = df1$country)
#Sort order of data.frame and matrix for plotting in circos
df1 <- arrange(df1, order)
df1$country <- factor(df1$country, levels = df1$country)
m <- m[levels(df1$country),levels(df1$country)]
### Define ranges of circos sectors and their colors (both of the sectors and the links)
df1$xmin <- 0
df1$xmax <- rowSums(m) + colSums(m)
n <- nrow(df1)
df1$rcol<-rgb(df1$r, df1$g, df1$b, max = 255)
df1$lcol<-rgb(df1$r, df1$g, df1$b, alpha=200, max = 255)
### Plot sectors (outer part)
par(mar=rep(0,4))
circos.clear()
### Basic circos graphic parameters
circos.par(cell.padding=c(0,0,0,0), track.margin=c(0,0.15), start.degree = 90, gap.degree =4)
### Sector details
circos.initialize(factors = df1$country, xlim = cbind(df1$xmin, df1$xmax))
### Plot sectors
circos.trackPlotRegion(ylim = c(0, 1), factors = df1$country, track.height=0.1,
#panel.fun for each sector
panel.fun = function(x, y) {
#select details of current sector
name = get.cell.meta.data("sector.index")
i = get.cell.meta.data("sector.numeric.index")
xlim = get.cell.meta.data("xlim")
ylim = get.cell.meta.data("ylim")
#text direction (dd) and adjusmtents (aa)
theta = circlize(mean(xlim), 1.3)[1, 1] %% 360
dd <- ifelse(theta < 90 || theta > 270, "clockwise", "reverse.clockwise")
aa = c(1, 0.5)
if(theta < 90 || theta > 270)  aa = c(0, 0.5)
#plot country labels
circos.text(x=mean(xlim), y=1.7, labels=name, facing = dd, cex=0.6,  adj = aa)
#plot main sector
circos.rect(xleft=xlim[1], ybottom=ylim[1], xright=xlim[2], ytop=ylim[2],
col = df1$rcol[i], border=df1$rcol[i])
#blank in part of main sector
circos.rect(xleft=xlim[1], ybottom=ylim[1], xright=xlim[2]-rowSums(m)[i], ytop=ylim[1]+0.3,
col = "white", border = "white")
#white line all the way around
circos.rect(xleft=xlim[1], ybottom=0.3, xright=xlim[2], ytop=0.32, col = "white", border = "white")
#plot axis
circos.axis(labels.cex=0.6, direction = "outside", major.at=seq(from=0,to=floor(df1$xmax)[i],by=5),
minor.ticks=1, labels.away.percentage = 0.15)
})
### Plot links (inner part)
### Add sum values to df1, marking the x-position of the first links
### out (sum1) and in (sum2). Updated for further links in loop below.
df1$sum1 <- colSums(m)
df1$sum2 <- numeric(n)
### Create a data.frame of the flow matrix sorted by flow size, to allow largest flow plotted first
df2 <- cbind(as.data.frame(m),orig=rownames(m),  stringsAsFactors=FALSE)
df2 <- reshape(df2, idvar="orig", varying=list(1:n), direction="long",
timevar="dest", time=rownames(m),  v.names = "m")
df2 <- arrange(df2,desc(m))
### Keep only the largest flows to avoid clutter
df2 <- subset(df2, m > quantile(m,0.6))
### Plot links
### Plot links
for(k in 1:nrow(df2)){
#i,j reference of flow matrix
i<-match(df2$orig[k],df1$country)
j<-match(df2$dest[k],df1$country)
#plot link
circos.link(sector.index1=df1$country[i], point1=c(df1$sum1[i], df1$sum1[i] + abs(m[i, j])),
sector.index2=df1$country[j], point2=c(df1$sum2[j], df1$sum2[j] + abs(m[i, j])),
col = df1$lcol[i])
#update sum1 and sum2 for use when plotting the next link
df1$sum1[i] = df1$sum1[i] + abs(m[i, j])
df1$sum2[j] = df1$sum2[j] + abs(m[i, j])
}
c(df1$sum1[i], df1$sum1[i] + abs(m[i, j]))
c(df1$sum2[j], df1$sum2[j] + abs(m[i, j]))
df1$country[j]
df1$country[i]
o
i
j
circos.clear()
par(mar = c(1, 1, 1, 1))
# reference: http://zuguang.de/circlize_book/book/initialize-genomic-plot.html#initialize-cytoband
circos.clear()
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initializeWithIdeogram(species = mySpecies, chromosome.index = paste0("chr", c(1:22, "X", "Y")))
for (i in length(BED.data$chrom)){
for (j in length(BED.data$chrom)){
if(j<i){
circos.link(BED.data$chrom[i], c(BED.data$txStart[i],BED.data$txEnd[i]),
BED.data$chrom[j], c(BED.data$txStart[j],BED.data$txEnd[j]),
1, h=0.3, col = "black", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
c(BED.data$txStart[j],BED.data$txEnd[j])
for (i in length(BED.data$chrom)){
for (j in length(BED.data$chrom)){
if(j<i){
circos.link(BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
1, h=0.3, col = "black", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in length(BED.data$chrom)){
for (j in length(BED.data$chrom)){
if(j<i){
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]))
# 1, h=0.3, col = "black", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
j
i
for (i in length(BED.data$chrom)){
for (j in length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
1, h=0.3, col = "black", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
1, h=0.3, col = "black", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
1, h=2, col = "yellow", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
1, h=5, col = "yellow", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
h=2, col = "yellow", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
h=2, col = "red", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
print(j)
print(i)
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
col = "red", lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
par(mar = c(1, 1, 1, 1))
# reference: http://zuguang.de/circlize_book/book/initialize-genomic-plot.html#initialize-cytoband
circos.clear()
circos.par(cell.padding = c(0, 0, 0, 0))
circos.initializeWithIdeogram(species = mySpecies, chromosome.index = paste0("chr", c(1:22, "X", "Y")))
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
col = "red")#, lwd=2, lty=1)
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
for (i in 1:length(BED.data$chrom)){
for (j in 1:length(BED.data$chrom)){
if(j<i){
circos.link(sector.index1=BED.data$chrom[i], point1=c(BED.data$txStart[i],BED.data$txEnd[i]),
sector.index2=BED.data$chrom[j], point2=c(BED.data$txStart[j],BED.data$txEnd[j]),
col = "cadetblue1")
# R color: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf
}
}
}
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/iGenomicsR/iGenomicsR')
runApp('Desktop/iGenomicsR/iGenomicsR_v2')
shiny::runApp('Desktop/iGenomicsR/iGenomicsR_v2')
shiny::runApp('Desktop/iGenomicsR/iGenomicsR')
runApp('Desktop/iGenomicsR/iGenomicsR_v2')
shiny::runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/iGenomicsR/iGenomicsR')
shiny::runApp('Desktop/TSUNAMI/shiny')
library(shinyWidgets)
R
version
version
version
library(shinyWidgets)
shiny::runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
load("/Users/zhi/Desktop/datafinal.Rdata")
data_final[,1]
options(stringAsFactors = FALSE)
data_final[,1]
drop.levels(data_final[,1])
droplevels(data_final[,1])
genes_str = data_final[,1]
genes_str
genes_str2 <- unlist(strsplit(genes_str, " /// "))
unlist(genes_str)
factor(genes_str)
library(gdata)
drop.levels(data_final[,1])
droplevels(genes_str)
factor(genes_str)
levels(genes_str)
levels(genes_str)
# save(data_final, file = "~/Desktop/datafinal.Rdata")
genes_str <- levels(data_final[,1])
genes_str <- unlist(strsplit(genes_str, " /// "))
genes_str
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
shiny::runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
load("/Users/zhi/Desktop/geneID.Rdata")
load("/Users/zhi/Desktop/RNA.Rdata")
View(geneID)
geneID_filtered1 = geneID
geneID_filtered1
percentile= 10
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
percentile= 0.1
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, percentile)[[1]], ]
geneID_filtered1
level(geneID_filtered1)
levels(geneID_filtered1)
factor(geneID_filtered1)
apply(RNA,1,max) > quantile(RNA, percentile)[[1]]
geneID
geneID_filtered1 = geneID[apply(RNA,1,max) > quantile(RNA, percentile)[[1]]]
print(dim(geneID))
unlist(geneID)
as.matrix(geneID)
apply(RNA,1,max) > quantile(RNA, percentile)[[1]]
quantile(RNA, percentile)[[1]]
apply(RNA,1,max)
apply(RNA,1,max) > quantile(RNA, percentile)[[1]]
geneID_filtered1
levels(droplevels(geneID_filtered1))
levels(droplevels(geneID_filtered1))
levels(droplevels(geneID_filtered1))[1:10]
geneID_filtered1[1:10,]
geneID_filtered1[1:10]
geneID[1:10]
geneID[1:10,]
geneID_filtered2 = geneID_filtered1[index]
geneID_filtered1[1]
geneID[1]
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
runApp('Desktop/TSUNAMI/shiny')
GEO_DB_csvpath = "./NCBI_GEO_SERIES_20180131_DOWNLOADED"
GEO_DB_csvpath
getwd()
setwd("Desktop/")
setwd("~/Desktop/TSUNAMI_older_files/NCBI_GEO_SERIES_20180424_DOWNLOADED/")
getwd()
load_data <- function(path) {
files <- dir(path, pattern = '\\.csv', full.names = TRUE)
tables <- lapply(files, read.csv)
do.call(rbind, tables)
}
GEO = load_data(getwd())
save(GEO, file = "~/Desktop/GEO_20180424.Rdata")
runApp('~/Desktop/TSUNAMI/shiny')
